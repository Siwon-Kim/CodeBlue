window.jest_html_reporters_callback__({"numFailedTestSuites":1,"numFailedTests":0,"numPassedTestSuites":7,"numPassedTests":19,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":1,"numTodoTests":0,"numTotalTestSuites":8,"numTotalTests":19,"startTime":1688007814884,"success":false,"testResults":[{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\src\\hospitals\\service\\hospitals.service.spec.ts","failureMessage":"  \u001b[1m‚óè \u001b[22mTest suite failed to run\n\n    \u001b[96msrc/hospitals/service/hospitals.service.spec.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2307: \u001b[0mCannot find module '../../commons/middlewares/medicalOpenAPI' or its corresponding type declarations.\n\n    \u001b[7m7\u001b[0m import { MedicalOpenAPI } from '../../commons/middlewares/medicalOpenAPI';\n    \u001b[7m \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/hospitals/service/hospitals.service.spec.ts\u001b[0m:\u001b[93m107\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2769: \u001b[0mNo overload matches this call.\n      Overload 1 of 3, '(object: Crawling, method: never): SpyInstance<never, never, any>', gave the following error.\n        Argument of type 'string' is not assignable to parameter of type 'never'.\n      Overload 2 of 3, '(object: Crawling, method: \"getRealTimeHospitalsBeds\"): SpyInstance<Promise<string[]>, [emogList: string[]], any>', gave the following error.\n        Argument of type '\"getLocalHospitaldata\"' is not assignable to parameter of type '\"getRealTimeHospitalsBeds\"'.\n\n    \u001b[7m107\u001b[0m         .spyOn(crawling, 'getLocalHospitaldata')\n    \u001b[7m   \u001b[0m \u001b[91m                         ~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n    \u001b[96msrc/hospitals/service/hospitals.service.spec.ts\u001b[0m:\u001b[93m108\u001b[0m:\u001b[93m10\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type 'never'.\n\n    \u001b[7m108\u001b[0m         .mockResolvedValueOnce(hospitals);\n    \u001b[7m   \u001b[0m \u001b[91m         ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/hospitals/service/hospitals.service.spec.ts\u001b[0m:\u001b[93m110\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2551: \u001b[0mProperty 'getLocalHospitals' does not exist on type 'HospitalsService'. Did you mean 'getHospitals'?\n\n    \u001b[7m110\u001b[0m       expect(await hospitalsService.getLocalHospitals(site)).toBe(hospitals);\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/hospitals/service/hospitals.service.ts\u001b[0m:\u001b[93m25\u001b[0m:\u001b[93m9\u001b[0m\n        \u001b[7m25\u001b[0m   async getHospitals(): Promise<Hospitals[]> {\n        \u001b[7m  \u001b[0m \u001b[96m        ~~~~~~~~~~~~\u001b[0m\n        'getHospitals' is declared here.\n    \u001b[96msrc/hospitals/service/hospitals.service.spec.ts\u001b[0m:\u001b[93m111\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getLocalHospitaldata' does not exist on type 'Crawling'.\n\n    \u001b[7m111\u001b[0m       expect(crawling.getLocalHospitaldata).toHaveBeenCalledTimes(1);\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/hospitals/service/hospitals.service.spec.ts\u001b[0m:\u001b[93m118\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2551: \u001b[0mProperty 'getNationHospitals' does not exist on type 'HospitalsService'. Did you mean 'getHospitals'?\n\n    \u001b[7m118\u001b[0m       expect(await hospitalsService.getNationHospitals()).toBe(hospitals);\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~~~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/hospitals/service/hospitals.service.ts\u001b[0m:\u001b[93m25\u001b[0m:\u001b[93m9\u001b[0m\n        \u001b[7m25\u001b[0m   async getHospitals(): Promise<Hospitals[]> {\n        \u001b[7m  \u001b[0m \u001b[96m        ~~~~~~~~~~~~\u001b[0m\n        'getHospitals' is declared here.\n    \u001b[96msrc/hospitals/service/hospitals.service.spec.ts\u001b[0m:\u001b[93m143\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2769: \u001b[0mNo overload matches this call.\n      Overload 1 of 3, '(object: Crawling, method: never): SpyInstance<never, never, any>', gave the following error.\n        Argument of type 'string' is not assignable to parameter of type 'never'.\n      Overload 2 of 3, '(object: Crawling, method: \"getRealTimeHospitalsBeds\"): SpyInstance<Promise<string[]>, [emogList: string[]], any>', gave the following error.\n        Argument of type '\"getNearbyHospitals\"' is not assignable to parameter of type '\"getRealTimeHospitalsBeds\"'.\n\n    \u001b[7m143\u001b[0m       const crawl = jest.spyOn(crawling, 'getNearbyHospitals');\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n    \u001b[96msrc/hospitals/service/hospitals.service.spec.ts\u001b[0m:\u001b[93m205\u001b[0m:\u001b[93m22\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getNearbyHospitals' does not exist on type 'Crawling'.\n\n    \u001b[7m205\u001b[0m       await crawling.getNearbyHospitals(emogList);\n    \u001b[7m   \u001b[0m \u001b[91m                     ~~~~~~~~~~~~~~~~~~\u001b[0m\n","testResults":[]},{"numFailingTests":0,"numPassingTests":2,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1688007825584,"runtime":10052,"slow":true,"start":1688007815532},"testFilePath":"C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\src\\patients\\service\\patients.service.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["PatientsService Unit Testing","createPatientInfo()"],"duration":16,"failureMessages":[],"fullName":"PatientsService Unit Testing createPatientInfo() should create patient info","status":"passed","title":"should create patient info"},{"ancestorTitles":["PatientsService Unit Testing","updatePatientInfo()"],"duration":6,"failureMessages":[],"fullName":"PatientsService Unit Testing updatePatientInfo() should update the patient info","status":"passed","title":"should update the patient info"}]},{"numFailingTests":0,"numPassingTests":4,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1688007825916,"runtime":10325,"slow":true,"start":1688007815591},"testFilePath":"C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\src\\reports\\service\\reports.service.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["ReportsService Unit Testing","createReport()"],"duration":20,"failureMessages":[],"fullName":"ReportsService Unit Testing createReport() should create a report with correct symptom level","status":"passed","title":"should create a report with correct symptom level"},{"ancestorTitles":["ReportsService Unit Testing","getReportDetails()"],"duration":4,"failureMessages":[],"fullName":"ReportsService Unit Testing getReportDetails() should return the report details","status":"passed","title":"should return the report details"},{"ancestorTitles":["ReportsService Unit Testing","getReportDetails()"],"duration":20,"failureMessages":[],"fullName":"ReportsService Unit Testing getReportDetails() should throw NotFoundException if the report does not exist","status":"passed","title":"should throw NotFoundException if the report does not exist"},{"ancestorTitles":["ReportsService Unit Testing","updateReport()"],"duration":5,"failureMessages":[],"fullName":"ReportsService Unit Testing updateReport() should update report","status":"passed","title":"should update report"}]},{"numFailingTests":0,"numPassingTests":4,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1688007825925,"runtime":10327,"slow":true,"start":1688007815598},"testFilePath":"C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\src\\requests\\service\\requests.service.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["RequestsService Unit Testing","getAllRequests()"],"duration":14,"failureMessages":[],"fullName":"RequestsService Unit Testing getAllRequests() getAllRequests request must be performed successfully","status":"passed","title":"getAllRequests request must be performed successfully"},{"ancestorTitles":["RequestsService Unit Testing","getSearchRequests()"],"duration":5,"failureMessages":[],"fullName":"RequestsService Unit Testing getSearchRequests() getSearchRequests request must be performed successfully","status":"passed","title":"getSearchRequests request must be performed successfully"},{"ancestorTitles":["RequestsService Unit Testing","addRequestQueue()"],"duration":3,"failureMessages":[],"fullName":"RequestsService Unit Testing addRequestQueue() should create a request successfully","status":"passed","title":"should create a request successfully"},{"ancestorTitles":["RequestsService Unit Testing","withdrawRequest()"],"duration":3,"failureMessages":[],"fullName":"RequestsService Unit Testing withdrawRequest() should withdraw a request successfully","status":"passed","title":"should withdraw a request successfully"}]},{"numFailingTests":0,"numPassingTests":4,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1688007825962,"runtime":10402,"slow":true,"start":1688007815560},"testFilePath":"C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\src\\requests\\controller\\requests.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["RequestsController Unit Testing","getAllRequests()"],"duration":18,"failureMessages":[],"fullName":"RequestsController Unit Testing getAllRequests() should get all obejct","status":"passed","title":"should get all obejct"},{"ancestorTitles":["RequestsController Unit Testing","getSearchRequests()"],"duration":5,"failureMessages":[],"fullName":"RequestsController Unit Testing getSearchRequests() should get searched object","status":"passed","title":"should get searched object"},{"ancestorTitles":["RequestsController Unit Testing","sendRequest()"],"duration":3,"failureMessages":[],"fullName":"RequestsController Unit Testing sendRequest() should return object","status":"passed","title":"should return object"},{"ancestorTitles":["RequestsController Unit Testing","withdrawRequest()"],"duration":2,"failureMessages":[],"fullName":"RequestsController Unit Testing withdrawRequest() should return object","status":"passed","title":"should return object"}]},{"numFailingTests":0,"numPassingTests":2,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1688007826047,"runtime":10485,"slow":true,"start":1688007815562},"testFilePath":"C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\src\\patients\\controller\\patients.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["PatientsController Unit Testing","createPatientInfo()"],"duration":13,"failureMessages":[],"fullName":"PatientsController Unit Testing createPatientInfo() should return object","status":"passed","title":"should return object"},{"ancestorTitles":["PatientsController Unit Testing","updatePatientInfo()"],"duration":3,"failureMessages":[],"fullName":"PatientsController Unit Testing updatePatientInfo() should return object","status":"passed","title":"should return object"}]},{"numFailingTests":0,"numPassingTests":2,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1688007826344,"runtime":10831,"slow":true,"start":1688007815513},"testFilePath":"C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\src\\hospitals\\controller\\hospitals.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["HospitalsController Unit Testing","getRecommendedHospitals()"],"duration":35,"failureMessages":[],"fullName":"HospitalsController Unit Testing getRecommendedHospitals() should get recommended Hospitals","status":"passed","title":"should get recommended Hospitals"},{"ancestorTitles":["HospitalsController Unit Testing","getNearbyHospitals()"],"duration":3,"failureMessages":[],"fullName":"HospitalsController Unit Testing getNearbyHospitals() should get nearby Hospitals","status":"passed","title":"should get nearby Hospitals"}]},{"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1688007826433,"runtime":10937,"slow":true,"start":1688007815496},"testFilePath":"C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\src\\reports\\controller\\reports.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["ReportsController Unit Testing","updateReport()"],"duration":13,"failureMessages":[],"fullName":"ReportsController Unit Testing updateReport() should return object","status":"passed","title":"should return object"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":["**/*.(t|j)s"],"coverageDirectory":"C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\coverage","coverageProvider":"babel","coverageReporters":["json","text","lcov","clover"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":15,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"./test/html-jest-report","filename":"report.html","includeFailureMsg":true}]],"rootDir":"C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\src","runTestsByPath":false,"seed":-318512632,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"","testSequencer":"C:\\Users\\siwon\\Desktop\\Voyage99\\projects\\CodeBlue\\node_modules\\@jest\\test-sequencer\\build\\index.js","updateSnapshot":"new","useStderr":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1688007826580,"_reporterOptions":{"publicPath":"./test/html-jest-report","filename":"report.html","expand":false,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"includeFailureMsg":true},"logInfoMapping":{},"attachInfos":{}})